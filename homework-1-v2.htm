<html>  
	//Zanqing Feng
  <head>  
        <meta charset="utf-8">  
        <title>My D3.js Homework</title>
  </head>  
    <body> 
	<div style="padding-left:100">
		<form id="chooser">
		IsWon:
		<input type="radio" checked="checked" value="All" name="isWon" />All
		<input type="radio" value="TRUE" name="isWon" />True
		<input type="radio" value="FALSE" name="isWon" />False<br />
		StageName:<select id="StageName">
			<option value="All">All</option>
			<option value="1 - Working">1 - Working</option>
			<option value="2 - Best Case">2 - Best Case</option>
			<option value="3 - Committed">3 - Committed</option>
			<option value="4 - Closed">4 - Closed</option>
			<option value="5 - Accepted">5 - Accepted</option>
			<option value="Closed - Lost">Closed - Lost</option>
		</select><br />
		&nbsp;&nbsp;&nbsp;<input type="button" onclick="getData()" value="Start to show" />
		</form>
	</div>
	<script>
	   String.prototype.replaceAll = function(s1,s2){
	　　return this.replace(new RegExp(s1,"gm"),s2);
	　　}
	</script> 
	<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>  
	
	<script>
		var isWon = "";
		var StageName = "";
		var mapState = {};
		var mapMonth = {};
		var mapYear = {};
		var mapWon = {};
		var mapStageName = {};
		var mapNum ={};
		var mode = false;
		function getColor(i){
			var colors = ["#FFC125","#388E8E","#8E8E38","#9BCD9B","#B4EEB4"];
			return colors[i];
		}

		function drawbar(data){
			d3.select("body svg").remove();
			//画布大小
			var width = 500;
			var height = 400;

			//在 body 里添加一个 SVG 画布   
			var svg = d3.select("body")
				.append("svg")
				.attr("width", width)
				.attr("height", height);

			//画布周边的空白
			 var padding = {left:100, right:30, top:80, bottom:20};

			 var dataset = {x:[],y:[]};
			 for(var index in data)
			 {
				dataset.x.push(index);
				dataset.y.push(Math.round(data[index]));
			 }
			//console.log(dataset);
					
			//x轴的比例尺
			var xScale = d3.scale.ordinal()
				.domain(dataset.x)
				.rangeRoundBands([0, width - padding.left - padding.right],0,0);
								 
			//y轴的比例尺
			var yScale = d3.scale.linear()
				.domain([0, d3.max(dataset.y)])
				.range([height - padding.top - padding.bottom, 0]);
				
			var xAxis = d3.svg.axis()
				.scale(xScale)
				.orient("bottom");
					
			//定义y轴
			var yAxis = d3.svg.axis()
				.scale(yScale)
				.tickFormat(function(d) {
					var commasFormatter = d3.format(",.0f")
					return "$" + commasFormatter(d);  
				})
				.orient("left");

			//矩形之间的空白
			var rectPadding = 4;
			 
			//添加矩形元素
			var rects = svg.selectAll(".MyRect")
					.data(dataset.y)
					.enter()
					.append("rect")
					.attr("class","MyRect")
					.attr("transform","translate(" + padding.left + "," + padding.top + ")")
					.attr("x", function(d,i){
						return xScale(dataset.x[i]) + rectPadding/2;
					} )
					.attr("y",function(d){
						return yScale(d);
					})
					.attr("width", xScale.rangeBand() - rectPadding )
					.attr("height", function(d){
						return height - padding.top - padding.bottom - yScale(d);
					})
					.attr('fill', function(d, i) {
					   return getColor(i);
					})
					.on("click",function(d,i){
						d3.select("body svg").remove();
						if(mode){
							mode = false;
							drawbar(mapMonth);
						}else{
							mode = true;
							drawbar(mapYear);
						}
						
					})
			 
			//添加文字元素
			var texts = svg.selectAll(".MyText")
					.data(dataset)
					.enter()
					.append("text")
					.attr("class","MyText")
					.attr("transform","translate(" + padding.left + "," + padding.top + ")")
					.attr("x", function(d,i){
						return xScale(i) + rectPadding/2;
					} )
					.attr("y",function(d){
						return yScale(d);
					})
					.attr("dx",function(){
						return (xScale.rangeBand() - rectPadding)/2;
					})
					.attr("dy",function(d){
						return 20;
					})
					.text(function(d,i){
						return dataset.y[i];
					});
					

			//添加x轴
			svg.append("g")
			  .attr("class","axis")
			  .attr("transform","translate(" + padding.left + "," + (height - padding.bottom) + ")")
			  .attr('fill', "#4F94CD")
			  .call(xAxis); 
					
			//添加y轴
			svg.append("g")
			  .attr("class","axis")
			  .attr("transform","translate(" + padding.left + "," + padding.top + ")")
			  .attr('fill', "#4F94CD")
			  .call(yAxis);

			
			svg.append("g") 
			 .append("text") 
			 .text(function(d,i){
				  if(mode)
					 return "sum(AnnualRevenue)/sum(NumberOfEmployees)"
				  else
					 return "sum(Total BRR)/sum(NumberOfEmployees)"
			  }) 
			 .attr("class","title") 
			 .attr("x",padding.left) 
			 .attr("y",padding.top-15); 

			
		}

		function clearMap(mapdata){
			for(var index in mapdata)
			   mapdata[index]=0;
		}

		function initMap(){
			d3.tsv("ZayoHackathonData_Sites.csv",function(error,csvdata){  
				if(error){  
					console.log(error);  
				}  
				//console.log(csvdata);  
				for( var i=0; i<csvdata.length; i++ ){  
					var account = csvdata[i]["Account ID"].replace(/(^\s+)|(\s+$)/g, "");  
					var state = csvdata[i].State.replace(/(^\s+)|(\s+$)/g, "");  
					mapState[account]=state;
				} 
				
				//for(var index in mapState)
				//	console.log(index+"->"+mapState[index]);
				d3.csv("ZayoHackathonData_Opportunities.csv",function(error,Oppdata){  
					if(error){  
						console.log(error);  
					}  
					//console.log(csvdata);  
					for( var i=0; i<Oppdata.length; i++ ){  
						var account = Oppdata[i]["Account ID"].replace(/(^\s+)|(\s+$)/g, ""); 
						var StageName = Oppdata[i]["StageName"]; 
						var isWon = Oppdata[i]["IsWon"]; 
						mapStageName[account]=StageName;
						mapWon[account]=isWon;
					}
					//console.log(mapStageName);
					//console.log(mapWon);
					getData();
				});
			
			});
		}
					
		

		function getData(){
			
			clearMap(mapMonth);
			clearMap(mapYear);
			clearMap(mapNum);
			
			var radio = document.getElementsByName("isWon");  
			for (i=0; i<radio.length; i++) {  
				if (radio[i].checked) {  
					isWon=radio[i].value;  
				}  
			} 
			StageName = document.getElementById("StageName").value; 

			d3.csv("ZayoHackathonData_Accounts.csv",function(error,data){  
				if(error){  
					console.log(error);  
				}  
				//console.log(csvdata);  
				for( var j=0; j<data.length; j++ ){  
					var account = data[j]["Account ID"].replace(/(^\s+)|(\s+$)/g, "");  
					var brr = data[j][" Total BRR "].replace("$","").replaceAll(",","").replace(/(^\s+)|(\s+$)/g, ""); 
					var annual = data[j][" AnnualRevenue "].replace("$","").replaceAll(",","").replace(/(^\s+)|(\s+$)/g, ""); 
					var num = data[j]["NumberOfEmployees"].replace(/(^\s+)|(\s+$)/g, ""); 
					var state = mapState[account];
					if(typeof(state)=="undefined"){
						//console.log(account);
						continue;
					}

					if(typeof(mapStageName[account])=="undefined"){
						//console.log(account);
						continue;
					}

					if(typeof(mapWon[account])=="undefined"){
						//console.log(account);
						continue;
					}
					if(state=="OR" || state=="PR"){
						continue;
					}
					if(isNaN(brr)){
						brr=0;
					}
					if(isNaN(annual)){
						annual=0;
					}
					if(isNaN(num)){
						num=0;
					}

					if(StageName == "All" && isWon == "All"){
						if(state in mapMonth){
						   mapMonth[state]=parseFloat(mapMonth[state])+parseFloat(brr);
						}else{
						   mapMonth[state]=parseFloat(brr);
						}
						if(state in mapYear){
						   mapYear[state]=parseFloat(mapYear[state])+parseFloat(annual);
						}else{
						   mapYear[state]=parseFloat(annual);
						}
						if(state in mapNum){
						   mapNum[state]=parseFloat(mapNum[state])+parseFloat(num);
						}else{
						   mapNum[state]=parseFloat(num);
						}
					}
					else if(StageName == "All" && isWon == mapWon[account]){
						//console.log(mapStageName[account]); 
						//console.log(mapWon[account]);
						if(state in mapMonth){
						   mapMonth[state]=parseFloat(mapMonth[state])+parseFloat(brr);
						}else{
						   mapMonth[state]=parseFloat(brr);
						}
						if(state in mapYear){
						   mapYear[state]=parseFloat(mapYear[state])+parseFloat(annual);
						}else{
						   mapYear[state]=parseFloat(annual);
						}
						if(state in mapNum){
						   mapNum[state]=parseFloat(mapNum[state])+parseFloat(num);
						}else{
						   mapNum[state]=parseFloat(num);
						}
					}
					else if(StageName == mapStageName[account]  && isWon == "All"){
						//console.log(mapStageName[account]); 
						//console.log(mapWon[account]);
						if(state in mapMonth){
						   mapMonth[state]=parseFloat(mapMonth[state])+parseFloat(brr);
						}else{
						   mapMonth[state]=parseFloat(brr);
						}
						if(state in mapYear){
						   mapYear[state]=parseFloat(mapYear[state])+parseFloat(annual);
						}else{
						   mapYear[state]=parseFloat(annual);
						}
						if(state in mapNum){
						   mapNum[state]=parseFloat(mapNum[state])+parseFloat(num);
						}else{
						   mapNum[state]=parseFloat(num);
						}
					}
					else if(mapStageName[account] == StageName && mapWon[account]==isWon){
						//console.log(mapStageName[account]); 
						//console.log(mapWon[account]);
						if(state in mapMonth){
						   mapMonth[state]=parseFloat(mapMonth[state])+parseFloat(brr);
						}else{
						   mapMonth[state]=parseFloat(brr);
						}
						if(state in mapYear){
						   mapYear[state]=parseFloat(mapYear[state])+parseFloat(annual);
						}else{
						   mapYear[state]=parseFloat(annual);
						}
						if(state in mapNum){
						   mapNum[state]=parseFloat(mapNum[state])+parseFloat(num);
						}else{
						   mapNum[state]=parseFloat(num);
						}
					}

				} 
				//console.log(mapMonth); 
				//console.log(mapYear); 
				//console.log(mapNum); 
				for(var state in mapNum){
					if(mapNum[state]!=0){
						mapMonth[state]=parseFloat(mapMonth[state])/parseFloat(mapNum[state]);
						mapYear[state]=parseFloat(mapYear[state])/parseFloat(mapNum[state]);
					}else{
						mapMonth[state]=0;
						mapYear[state]=0;
					}
				}
				//console.log(mapMonth); 
				//console.log(mapYear); 
				//console.log(mapNum); 
				drawbar(mapMonth);
				
				});
			}
		initMap();
        </script>  
  
    </body>  
</html>  
